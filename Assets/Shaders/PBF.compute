#pragma kernel ComputeSourceAndDestination
#pragma kernel ComputeDensity
#pragma kernel ComputeExternalForces
#pragma kernel Integrate
#pragma kernel ComputeScalingFactor
#pragma kernel ComputePositionCorrection
#pragma kernel PositionCorrection
#pragma kernel ComputeDensityFluctuation
#pragma kernel UpdateVelocity
#pragma kernel ComputeHash
#pragma kernel ParallelBitonicParticle
#pragma kernel ComputeCellStartEnd

#include "GPUTrails.cginc"

struct CellStartEnd
{
	int startIdx;
	int endIdx;
};

struct FluidCollider
{
	float3 colliderMin;
	float3 colliderMax;
};

RWStructuredBuffer<Particle> _particleReadBuffer;
RWStructuredBuffer<Particle> _particleWriteBuffer;
RWStructuredBuffer<float> _fOutputBuffer;
RWStructuredBuffer<CellStartEnd> _cellStartEndBuffer;
RWStructuredBuffer<int> _particleIdBuffer;
RWStructuredBuffer<FluidCollider> _fluidColliderBuffer;

uint _particleNum;
float _time;
float _gatherPower; // マウスインタラクションの強度
float4 _mousePos;
bool _isCollisionOnlyInIntegrate;	// Integrateカーネルで衝突のみにするかどうか
int _fluidColliderNum;		// 障害物の数

float4 _spaceMin;
float4 _spaceMax;
float3 _sourceMin;
float3 _sourceMax;
float3 _destinationMin;
float3 _destinationMax;
float3 _initVelocity;

float4 _gravity;
float _effectiveRadius;		// 有効半径
float _mass;				// 質量
float _viscosity;			// 粘性係数
float _dt;					// タイムステップ幅
float _density;				// 初期密度
float _epsilon;				// 緩和係数
bool _useArtifactPressure;	// 人工圧力を使うか
float _ap_k;				// 人工圧力係数
float _ap_n;				// 人工圧力係数
float _ap_q;				// 人工圧力係数
float _ap_wq;
float _densVar;				// 平均密度変動率

float _wallStiffness;		// 壁係数

int3 _nnSearchDivNum;		// 空間分割数
int _inc;					// BiotonicSort用
int _dir;					// BiotonicSort用

// カーネル関数係数
float _wpoly6, _gWpoly6, _lWpoly6;
float _wspiky, _gWspiky, _lWspiky;
float _wvisc, _gWvisc, _lWvisc;

// 乱数
float Rand(float2 co){
    return frac(sin(dot(co.xy, float2(12.9898,78.233))) * 43758.5453);
}

// 位置座標 → セル座標
uint3 PositionToCell(float3 pos)
{
	float3 units = (_spaceMax.xyz - _spaceMin.xyz) / (float3)_nnSearchDivNum;
	uint3 coor = ((clamp(pos, _spaceMin.xyz, _spaceMax.xyz - 0.0001) - _spaceMin.xyz) / units);

	return coor;
}

// 領域にパーティクルが含まれているかどうか
bool IsIncludeArea(float3 pos, float3 min, float3 max)
{
	return min.x <= pos.x && pos.x <= max.x && min.y <= pos.y && pos.y <= max.y && min.z <= pos.z && pos.z <= max.z; 
}

// 領域内のランダムな点を返す
float3 RandomInArea(float2 co, float3 min, float3 max)
{
	return float3(Rand(co) * (max.x - min.x) + min.x, Rand(co + float2(1,1)) * (max.y - min.y) + min.y, Rand(co + float2(2,2)) * (max.z - min.z) + min.z);
}

// 流入と流出の処理
[numthreads(256, 1, 1)]
void ComputeSourceAndDestination(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x;
	if (index >= _particleNum) return;
	Particle prt = _particleReadBuffer[index];

	if (prt.hash == _nnSearchDivNum.x * _nnSearchDivNum.y * _nnSearchDivNum.z) {
		prt.pos = RandomInArea(prt.pos + prt.vel, _sourceMin, _sourceMax);
		prt.prevPos = prt.pos;
		prt.vel = _initVelocity;
		prt.hash =  0;
	}
	else if (IsIncludeArea(prt.pos, _destinationMin, _destinationMax)) {
		prt.hash = _nnSearchDivNum.x * _nnSearchDivNum.y * _nnSearchDivNum.z;
	}

	_particleWriteBuffer[index] = prt;
}


// 密度計算
[numthreads(256, 1, 1)]
void ComputeDensity(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x;
	if (index >= _particleNum) return;
	Particle prt = _particleReadBuffer[index];
	
	Particle temp;
	float dens = 0.0;
	float3 force = 0.0;
	float r = 0.0;
	
	uint3 start = PositionToCell(prt.pos - _effectiveRadius.xxx);
	uint3 end = PositionToCell(prt.pos + _effectiveRadius.xxx);

	for (uint x = start.x; x <= end.x; x++) {
		for (uint y = start.y; y <= end.y; y++) {
			for (uint z = start.z; z <= end.z; z++) {

				// セル内のパーティクルの密度を足す
				int hash = x + y * _nnSearchDivNum.x + z * _nnSearchDivNum.x * _nnSearchDivNum.y;
				for (int i = _cellStartEndBuffer[hash].startIdx; i <= _cellStartEndBuffer[hash].endIdx; i++) {
					Particle temp = _particleReadBuffer[i];
					r = distance(temp.pos, prt.pos);
					if (r <= _effectiveRadius) {
						// 密度
						float q = _effectiveRadius * _effectiveRadius - r * r;
						dens += _mass * _wpoly6 * q * q * q;
					}
				}

			}
		}
	}

	prt.dens = dens;
	_particleWriteBuffer[index] = prt;
}

// 力場計算
[numthreads(256, 1, 1)]
void ComputeExternalForces(uint3 id : SV_DispatchThreadId)
{
	uint index = id.x;
	if (index >= _particleNum) return;
	Particle prt = _particleReadBuffer[index];


	float3 force = 0.0;
	float r = 0.0;

	uint3 start = PositionToCell(prt.pos - _effectiveRadius.xxx);
	uint3 end = PositionToCell(prt.pos + _effectiveRadius.xxx);

	for (uint x = start.x; x <= end.x; x++) {
		for (uint y = start.y; y <= end.y; y++) {
			for (uint z = start.z; z <= end.z; z++) {

				// セル内のパーティクルにかかる力を足す
				int hash = x + y * _nnSearchDivNum.x + z * _nnSearchDivNum.x * _nnSearchDivNum.y;
				for (int i = _cellStartEndBuffer[hash].startIdx; i <= _cellStartEndBuffer[hash].endIdx; i++) {
					Particle temp = _particleReadBuffer[i];
					r = distance(temp.pos, prt.pos);
					if (r <= _effectiveRadius && r > 0.0001) {
						float q = _effectiveRadius - r;
						float3 vij = temp.vel - prt.vel;

						force += _viscosity * _mass * (vij / temp.dens) * _lWvisc * q;
					}
				}

			}
		}
	}

	// 重力(外力)
	force += _gravity.xyz;

	// マウスインタラクション
	if (_mousePos.x > -1000.0) {
		force += (_mousePos.xyz - prt.pos) * _gatherPower;
	}

	prt.force = force;

	_particleWriteBuffer[index] = prt;
}

// 境界処理
void ComputeRepulsion(Particle particle, float3 min, float3 max, out float3 opos, out float3 ovel)
{
	float dist;
	float3 closestPoint; 	// 最近傍点
	float closestDist;		// 最近傍点までの距離
	float3 n;				// 法線

	// X(-)境界
	closestPoint = float3(min.x, particle.pos.yz);
	closestDist = min.x - particle.pos.x;
	n = float3(1, 0, 0);
	
	// X(+)境界
	dist = particle.pos.x - max.x;
	if (dist > closestDist) {
		closestDist = dist;
		closestPoint = float3(max.x, particle.pos.yz);
		n = float3(-1, 0, 0);
	}

	// Y(-)境界
	dist = min.y - particle.pos.y;
	if (dist > closestDist) {
		closestDist = dist;
		closestPoint = float3(particle.pos.x, min.y, particle.pos.z);
		n = float3(0, 1, 0);
	}

	// Y(+)境界
	dist = particle.pos.y - max.y;
	if (dist > closestDist) {
		closestDist = dist;
		closestPoint = float3(particle.pos.x, max.y, particle.pos.z);
		n = float3(0, -1, 0);
	}

	// Z(-)境界
	dist = min.z - particle.pos.z;
	if (dist > closestDist) {
		closestDist = dist;
		closestPoint = float3(particle.pos.xy, min.z);
		n = float3(0, 0, 1);
	}

	// Z(+)境界
	dist = particle.pos.z - max.z;
	if (dist > closestDist) {
		closestDist = dist;
		closestPoint = float3(particle.pos.xy, max.z);
		n = float3(0, 0, -1);
	}

	if (closestDist > 0.0) {
		float res = _wallStiffness;
		res = (res > 0.0) ? (res * abs(closestDist) / (_dt * length(particle.vel))) : 0.0;
		ovel = particle.vel - (1.0 + res) * n * dot(n, particle.vel);
		opos = closestPoint;
	}
	else {
		ovel = particle.vel;
		opos = particle.pos;
	}
}

// Boxの境界処理
void ComputeBoxRepulsion(Particle particle, float3 min, float3 max, out float3 opos, out float3 ovel)
{
	float dist;
	float3 closestPoint; 	// 最近傍点
	float closestDist;		// 最近傍点までの距離
	float3 n;				// 法線

	// X(-)境界
	closestPoint = float3(min.x, particle.pos.yz);
	closestDist = min.x - particle.pos.x;
	n = float3(1, 0, 0);
	
	// X(+)境界
	dist = particle.pos.x - max.x;
	if (dist > closestDist) {
		closestDist = dist;
		closestPoint = float3(max.x, particle.pos.yz);
		n = float3(-1, 0, 0);
	}

	// Y(-)境界
	dist = min.y - particle.pos.y;
	if (dist > closestDist) {
		closestDist = dist;
		closestPoint = float3(particle.pos.x, min.y, particle.pos.z);
		n = float3(0, 1, 0);
	}

	// Y(+)境界
	dist = particle.pos.y - max.y;
	if (dist > closestDist) {
		closestDist = dist;
		closestPoint = float3(particle.pos.x, max.y, particle.pos.z);
		n = float3(0, -1, 0);
	}

	// Z(-)境界
	dist = min.z - particle.pos.z;
	if (dist > closestDist) {
		closestDist = dist;
		closestPoint = float3(particle.pos.xy, min.z);
		n = float3(0, 0, 1);
	}

	// Z(+)境界
	dist = particle.pos.z - max.z;
	if (dist > closestDist) {
		closestDist = dist;
		closestPoint = float3(particle.pos.xy, max.z);
		n = float3(0, 0, -1);
	}

	if (closestDist < 0.0) {
		float res = _wallStiffness;
		res = (res > 0.0) ? (res * abs(closestDist) / (_dt * length(particle.vel))) : 0.0;
		ovel = particle.vel - (1.0 + res) * n * dot(n, particle.vel);
		opos = closestPoint;
	}
	else {
		ovel = particle.vel;
		opos = particle.pos;
	}
}

// 予測位置・速度の計算
[numthreads(256, 1, 1)]
void Integrate(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x;
	if (index >= _particleNum) return;

	Particle particle = _particleReadBuffer[index];

	float effectiveRange = 0.0;

	// 境界条件
	float3 opos, ovel;
	ComputeRepulsion(particle, _spaceMin, _spaceMax, opos, ovel);
	particle.pos = opos;
	particle.vel = ovel;

	for (uint i = 0; i < _fluidColliderNum; i++) {
		ComputeBoxRepulsion(particle, _fluidColliderBuffer[i].colliderMin, _fluidColliderBuffer[i].colliderMax, opos, ovel);
		particle.pos = opos;
		particle.vel = ovel;
	}

	if (!_isCollisionOnlyInIntegrate) {
		particle.prevPos = particle.pos;

		particle.vel += particle.force * _dt;
		particle.pos += particle.vel * _dt;
	}

	_particleWriteBuffer[index] = particle;
}

// スケーリングファクタλ_iの計算
[numthreads(256, 1, 1)]
void ComputeScalingFactor(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x;
	if (index >= _particleNum) return;
	Particle prt = _particleReadBuffer[index];

	uint3 start = PositionToCell(prt.pos - _effectiveRadius.xxx);
	uint3 end = PositionToCell(prt.pos + _effectiveRadius.xxx);
	float r = 0.0;
	float dens = 0.0;
	for (uint x = start.x; x <= end.x; x++) {
		for (uint y = start.y; y <= end.y; y++) {
			for (uint z = start.z; z <= end.z; z++) {

				// セル内のパーティクルの密度を足す
				int hash = x + y * _nnSearchDivNum.x + z * _nnSearchDivNum.x * _nnSearchDivNum.y;
				for (int i = _cellStartEndBuffer[hash].startIdx; i <= _cellStartEndBuffer[hash].endIdx; i++) {
					Particle temp = _particleReadBuffer[i];
					r = distance(temp.pos, prt.pos);
					if (r <= _effectiveRadius) {
						// 密度
						float q = _effectiveRadius * _effectiveRadius - r * r;
						dens += _mass * _wpoly6 * q * q * q;					
					}
				}
				
			}
		}
	}

	// 密度拘束条件 (条件 : 初期密度から変動がない)
	float C = dens / _density - 1.0;

	// スケーリングファクタの分母項計算
	float sd = 0.0;		// 平滑化2乗距離

	for (uint s = start.x; s <= end.x; s++) {
		for (uint t = start.y; t <= end.y; t++) {
			for (uint u = start.z; u <= end.z; u++) {

				// セル内のパーティクルの密度を足す
				int hash = s + t * _nnSearchDivNum.x + u * _nnSearchDivNum.x * _nnSearchDivNum.y;
				for (int i = _cellStartEndBuffer[hash].startIdx; i <= _cellStartEndBuffer[hash].endIdx; i++) {
					Particle temp = _particleReadBuffer[i];
					r = distance(temp.pos, prt.pos);
					if (r <= _effectiveRadius && r > 0.0) {
						float3 rij = prt.pos - temp.pos;
						float q = _effectiveRadius - r;

						// 平滑化2乗距離を計算
						float3 deltaPos = (_gWspiky * q * q * rij / r) / _density;
						sd += dot(deltaPos, deltaPos);
					}
				}

			}
		}
	}


	prt.scalingFactor = - C / (sd + _epsilon);
	prt.dens = dens;

	_particleWriteBuffer[index] = prt;
}

// 位置修正量の計算
[numthreads(256, 1, 1)]
void ComputePositionCorrection(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x;
	if (index >= _particleNum) return;
	Particle prt = _particleReadBuffer[index];
	float si = prt.scalingFactor;

	float r = 0.0;
	float3 dp = 0.0;

	uint3 start = PositionToCell(prt.pos - _effectiveRadius.xxx);
	uint3 end = PositionToCell(prt.pos + _effectiveRadius.xxx);
	for (uint x = start.x; x <= end.x; x++) {
		for (uint y = start.y; y <= end.y; y++) {
			for (uint z = start.z; z <= end.z; z++) {

				// セル内のパーティクルの密度を足す
				int hash = x + y * _nnSearchDivNum.x + z * _nnSearchDivNum.x * _nnSearchDivNum.y;
				for (int i = _cellStartEndBuffer[hash].startIdx; i <= _cellStartEndBuffer[hash].endIdx; i++) {
					Particle temp = _particleReadBuffer[i];
					r = distance(temp.pos, prt.pos);
					if (r <= _effectiveRadius && r > 0.0) {
						float scorr = 0.0f;
						float3 rij = prt.pos - temp.pos;

						// 人工圧力を使う場合
						if(_useArtifactPressure) {
							float q1 = _effectiveRadius * _effectiveRadius - r * r;
							float ww = _wpoly6 * q1 * q1 * q1 / _ap_wq;
							scorr = -_ap_k * pow(abs(ww), _ap_n) * _dt * _dt;
						}

						float q = _effectiveRadius - r;
						float sj = temp.scalingFactor;

						dp += (si + sj + scorr) * (_gWspiky * q * q * rij / r) / _density;
					}
				}

			}
		}
	}
	
	prt.deltaPos = dp;

	_particleWriteBuffer[index] = prt;
}

// 位置修正
[numthreads(256, 1, 1)]
void PositionCorrection(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x;
	if (index >= _particleNum) return;

	Particle prt = _particleReadBuffer[index];
	prt.pos += prt.deltaPos;

	_particleWriteBuffer[index] = prt; // 位置修正
}

// 密度変動計算
[numthreads(256, 1, 1)]
void ComputeDensityFluctuation(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x;
	if (index >= _particleNum) return;
	Particle prt = _particleReadBuffer[index];
	
	float err = prt.dens - _density;

	if (err >= 0.0) {
		_fOutputBuffer[index] = err / _density;
	}
	else {
		_fOutputBuffer[index] = 0.0;
	}

	_particleWriteBuffer[index] = prt;
}

// 速度の更新
[numthreads(256, 1, 1)]
void UpdateVelocity(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x;
	if (index >= _particleNum) return;
	Particle prt = _particleReadBuffer[index];

	float3 newpos = prt.pos;
	float3 prevpos = prt.prevPos;

	prt.vel = (newpos - prevpos) / _dt;

	_particleWriteBuffer[index] = prt;
}


// ハッシュ値の計算
[numthreads(256, 1, 1)]
void ComputeHash(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x;
	if (index >= _particleNum) return;
	Particle prt = _particleReadBuffer[index];

	if (prt.hash >= _nnSearchDivNum.x * _nnSearchDivNum.y * _nnSearchDivNum.z) {
		_particleWriteBuffer[index] = prt;
		return;
	}

	int3 coor = PositionToCell(prt.pos);

	prt.hash = coor.x + coor.y * _nnSearchDivNum.x + coor.z * _nnSearchDivNum.x * _nnSearchDivNum.y;

	_particleWriteBuffer[index] = prt;
}

#define COMPARISON(a,b) ( a.hash > b.hash )

// パーティクルをHashでBitonicソート
[numthreads(256, 1, 1)]
void ParallelBitonicParticle(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x;
	if (index >= _particleNum) return;

	int low = index & (_inc - 1); // low order bits (below INC)
	int i = (index << 1) - low; // insert 0 at position INC
	bool reverse = ((_dir & i) == 0); // asc/desc order

	Particle x0 = _particleReadBuffer[i];
	Particle x1 = _particleReadBuffer[_inc + i];

	bool swap = reverse ^ COMPARISON(x0, x1);
	Particle auxa = x0;
	Particle auxb = x1;
	if (swap) { x0 = auxb; x1 = auxa; }

	_particleWriteBuffer[i] = x0;
	_particleWriteBuffer[_inc + i] = x1;
}

// セルのstartとendを挿入 & ParticleIdを挿入
[numthreads(256, 1, 1)]
void ComputeCellStartEnd(uint3 id : SV_DispatchThreadID)
{
	int index = id.x;
	if (index >= (int)_particleNum) return;
	Particle prt = _particleReadBuffer[index];

	if (index - 1 >= 0 && prt.hash != _particleReadBuffer[index - 1].hash) {
		_cellStartEndBuffer[prt.hash].startIdx = index;
	}
	else if (index == 0) {
		_cellStartEndBuffer[prt.hash].startIdx = 0;
	}

	if (index + 1 < (int)_particleNum && prt.hash != _particleReadBuffer[index + 1].hash) {
		_cellStartEndBuffer[prt.hash].endIdx = index;
	}
	else if (index == (int)_particleNum - 1) {
		_cellStartEndBuffer[prt.hash].endIdx = index;
	}

	// パーティクルIDを挿入
	_particleIdBuffer[prt.index] = index;
}